code for 8-bit ALU

module alu1(a,b,op,out);
input [7:0]a;
input [7:0]b;
input [3:0]op;
output [15:0]out;
reg [15:0]out;

always@(*)
begin
case(op)
4'b0000:out[0]=a+b;
4'b0001:out[1]=a-b;
4'b0010:out[2]=a*b;
4'b0011:out[3]=a/b;
4'b0100:out[4]=a%b;
4'b0101:out[5]=a^b;
4'b0110:out[6]=a&b;
4'b0111:out[7]=a|b;
4'b1000:out[8]=~a;
4'b1001:out[9]=~(a&b);
4'b1010:out[10]=~(a|b);
4'b1011:out[11]=~(a^b);
4'b1100:out[12]=~b;
4'b1101:out[13]=a**b;
4'b1110:out[14]=a<<1;
4'b1111:out[15]=a<<2;
endcase
end
endmodule

testbench code:
module alu1_tb;
  reg [7:0]a;
  reg [7:0]b;
reg [3:0]op; 
  wire [15:0]out;

  alu1 a1(a, b, op, out);

initial 
begin
	       op=4'b1010;
  		   a=8'b00001111; a=8'b00001000; 
     #50   a=8'b11110000; b=8'b00001111; 
     #50   a=8'b11111111; b=8'b11111111; 
  #50;
end

  initial 
    $monitor ($time , " a=%d, b=%d, op=%d, out=%d", a, b, op, out);
  
  initial begin
  $dumpfile("dump.vcd"); $dumpvars;
  end
    endmodule

