verilog code:

module fifo
    // Parameters section
    parameter FIFO_DEPTH = 8;
	parameter DATA_WIDTH = 16;
    // Ports section   
	(input clk, 
     input rst_n,
     input cs,     // chip select	 
     input wr, 
     input rd, 
     input [DATA_WIDTH-1:0] data_in, 
     output reg [DATA_WIDTH-1:0] data_out, 
	 output fifo_empty,
	 output fifo_full); 

  localparam FIFO_DEPTH_LOG = $clog2(FIFO_DEPTH);// 
	
    // Declare a by-dimensional array to store the data
  reg [DATA_WIDTH-1:0] mem [0:FIFO_DEPTH-1];// depth 8 => [0:7] 32 bit elements
	
	// Wr/Rd pointer have 1 extra bits at MSB
  reg [FIFO_DEPTH_LOG:0] wr_ptr;//3:0
  reg [FIFO_DEPTH_LOG:0] rd_ptr;//3:0

  //write
    always @(posedge clk or negedge rst_n) 
      begin
      if(!rst_n)//rst =0 system reset happens
		    wr_ptr <= 0;
        else if (cs && wr && !fifo_full) begin
          mem[wr_ptr[FIFO_DEPTH_LOG-1:0]] <= data_in;
	       wr_ptr <= wr_ptr + 1'b1;
      end
      end
  
	//read
	always @(posedge clk or negedge rst_n) 
      begin
	    if(!rst_n)
		    rd_ptr <= 0;
        else if (cs && rd && !fifo_empty) begin
          data_out <= mem[rd_ptr[FIFO_DEPTH_LOG-1:0]];
	        rd_ptr <= rd_ptr + 1'b1;
      end
	end
	
	// Declare the empty/full logic
  assign fifo_empty = (rd_ptr == wr_ptr);
  assign fifo_full  = (rd_ptr == {~wr_ptr[FIFO_DEPTH_LOG], wr_ptr[FIFO_DEPTH_LOG-1:0]});
  
endmodule



testbench verilog code:


`timescale 1ns/1ns
module tb_fifo();
	
	// Testbench variables
	parameter FIFO_DEPTH = 8;
	parameter DATA_WIDTH = 16;
    reg clk = 0; 
    reg rst_n;
    reg cs;	 
    reg wr;
    reg rd;
    reg [DATA_WIDTH-1:0] data_in;
    wire [DATA_WIDTH-1:0] data_out;
	wire fifo_empty;
	wire fifo_full;
	
    integer i;
	
	// Instantiate the DUT
	fifo 
	    #(.FIFO_DEPTH(FIFO_DEPTH),
          .DATA_WIDTH(DATA_WIDTH))
        dut
         (.clk         (clk     ), 
         .rst_n        (rst_n   ),
         .cs           (cs      ),	 
         .wr           (wr   ), 
         .rd           (rd   ), 
         .data_in      (data_in ), 
         .data_out     (data_out), 
	     .fifo_empty   (empty   ),
	     .fifo_full    (full    ));

  	// Create the clock signal
	always begin #5 clk = ~clk; end
  
    task write_data(input [DATA_WIDTH-1:0] d_in);
	    begin
		    @(posedge clk); // sync to positive edge of clock
			cs = 1; wr = 1;
			data_in = d_in;
			$display($time, " write_data data_in = %0d", data_in);
			@(posedge clk);
		    cs = 1; wr = 0;
		end
	endtask
	
	task read_data();
	    begin
		    @(posedge clk);  // sync to positive edge of clock
			cs = 1; rd = 1;
			@(posedge clk);
			//#1;
		    $display($time, " read_data data_out = %0d", data_out);
		    cs = 1; rd = 0;
		end
	endtask
	

	
    // Create stimulus	  
    initial begin
	    #1; 
		rst_n = 0; rd = 0; wr = 0;
		
        @(posedge clk) 
		rst_n = 1;
		$display($time, "\n SCENARIO 1");
		write_data(1);
		write_data(10);
		write_data(100);
		read_data();
		read_data();
		read_data();
		//read_data();
		
        $display($time, "\n SCENARIO 2");
		for (i=0; i<FIFO_DEPTH; i=i+1) begin
		    write_data(2**i);
			read_data();        
		end

        $display($time, "\n SCENARIO 3");		
		for (i=0; i<=FIFO_DEPTH; i=i+1) begin
		    write_data(2**i);
		end
		
		for (i=0; i<FIFO_DEPTH; i=i+1) begin
			read_data();
		end
		
	    #40 $finish;
	end
  
  initial begin
    $dumpfile("dump.vcd"); $dumpvars;
  end
endmodule
